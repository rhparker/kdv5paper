%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G13035) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 576 191
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 576 191
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: KVIVKR+Helvetica
%!FontType1-1.0: KVIVKR+Helvetica 1.0000.0.0000
14 dict begin/FontName /KVIVKR+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /zero put
dup 34 /asterisk put
dup 35 /parenleft put
dup 36 /semicolon put
dup 37 /space put
dup 38 /parenright put
dup 39 /one put
dup 40 /two put
dup 41 /three put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<







00>] def
/CharStrings 11 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/asterisk 4 def
/zero 5 def
/one 6 def
/two 7 def
/three 8 def
/semicolon 9 def
/u20B8 10 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4072461 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B5BF8E443649147905228038171EB73F3E0B647FF27DF9EB6CBB52D184194DC83C1FA8CC47E0FA3502698ED749907FE4D5A0F8823ADB9FED67C3EB209665DC2531F3E7B9C105852DE6D94CD503F07FCE430C1EC82A169B45C5B92CF80EE0CC0AAEB1AEC2033D1FAB2253632554D3E637E5032EB46D5BDD46F31C9DF9218D774E99D8BEF0181EFB4CD1E24AF4DF721E58285689FD47C1F24BD8C3C996D7AAEFAD72745AD6F228B4D3C4B38F945EEB374EF7C1E5DC988900CDAAF3E575212CAA6D3F1CA166C81FC2EE80062CAE55576EB5AF876AD833B355857D2B2BAC30950F8D1C1E7B52AA183BECB4F59451E8426D3420348ABAE2AE87701C7BAAC1EA800B0CE931FD9E4746BCD01DBF87047BE530F053AED9694120C8418073A2F840C63A8B6C71B1C34FF2708EEED32447986F324BA6C537A4794CC0EB23F5317798987665495FFA0D765BE95BE3895BDB73CD167CCC326F378FF187EB31F0263617D451FBFC0B5A1F2697A4D09BFA4BD0016FC129DF2BD491BD5276F78E88C51E55A63559A0A436EAD7FA00A1B25F4336C0436C926320523E63709EB6A0A2A515ABC4AD26C12A2E46964AD9F1A0BB6A235FFEB996735331BB4DCDBE280B1A8575FC12BBA698AC8CD4A4636FAAFE3B99BBB10EBFE297FB264772CDA6C0D502B8A278F91347C9D21E55B42B05F7145FA5E5D052AF8B894B93E284945059E7A2097912E6EF8E7074A5A3F88281155AE09700D8986BD2EC93466F21961B774F7B436C58C94255
ADB8393BA6BE974F4D12F6844C3F8DE95CEBE271485F2461F9F4CDF2590A7AA205E27046B0EC65F5CB1019D8E2EA71563DFE602CE39202D19173B398CA1B0D5FD7A59C0D839F5F73162DDA6EDB38766E8DA1A6FA3A92259A78D558BE3625815D371DD413930EFB6207EF92E51D8A9D2BCB5A12F9DD6214BD6F21D6420F358E263DBD6B72F45395E6DA646275548101FF0233B780AD66C4E6854119052A31E4415551979C60DF99338639E56D56BFA0F092105C269A86DF392DA5C8353AE45F8575554790D65773F9FE0B6DEDB8CED1715E29603B06ABAD068697DB331164499AE8E55640ED1A1799AF21F6B50672C5C58F44EB6C9DFDA0B5EC0341A80C92C9B3013D07916B466A72081183ACA85C036465A6732B888BD7904977A08B093E6633D9E0A47ADCC438EC5707FD9A1F309965BBE902F22E411A6611DE1E7AB6470C08B312B92CBA4784AA73805874C69C7E2613D67498386305C79D9F3B8EE9B1813B906D6F769877372E3B5A804D090416A193DA418AFC1C85D14ABE6CBB270837AE681EECCE3515A5A037503F73AF29776824C5C21F2F516F190CC958FF7AA74229A665F65B30FDD1577DCD338695CBEE3D25ECDB588E4D33787A2776BC25A91B3854626B3ADEA5055C72D673D3DBACDF4CE99D59F9CE81FDD9BD3572363EFA03FCACFE188020D3673B35375C2E836D9B4A83D3C1A8DDA7161E91A8D8F62AABCDF88B3F66704C1D58B51C7DC1AA4C70E1DCE30C43121BA8A181290E055CD89918D739FF1FD23CDFE98DA4D15250F7FDDDA43AB964EDE5383447AFC0515FBE3B8ABC421360585121033423BEC194B7ADE7D6CF2B4D6511394AFEC543CFDCF13DC13DBF5055FE3C689A552FEDA765761639BDF42A2F6368A47B810E7B3CD6D7BD86D2937E0E9CE52DD6114B9F9F79A51D500533304AC32DD5F3977F1A4E55DC2B658945D62F4C82AF5FE12D0FA8AA16A8F4C5BA4A25D60BE3409BAFC95FFDB75B07097EE0A77E30FFA3FE2D5073F01F9B97CC396FDC593D178BFDEFAAABE2410AEB1E3E2F143897598DD777783FF85EBE532C43049D506A1A110E720C14AE19514F7D708350B96B0264F548A654E372D5F5DB4237FECD809FA1DC86606F371695F1C1EC6A9206A20C59B79DAAA4F2B00CF8725EC2EA01D4761B8355CE3F075E3FE772B3D12705FA7E005D2B92E2B3F2C35F5E5BAB9457DCEE5CB1CD886231DEFB0AE04DE4B39367C6DDE46931983201910D28C2346CAA17BD806901F748F66F26267155B46BFD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/KVIVKR+Helvetica cguidfix
/F1.1/KVIVKR+Helvetica renmfont
%RBIBeginFontSubset: SDWVOI+Helvetica-Oblique
%!FontType1-1.0: SDWVOI+Helvetica-Oblique 1.0000.0.0000
14 dict begin/FontName /SDWVOI+Helvetica-Oblique def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /theta put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1910 1 index div -985 2 index div 3218 3 index div 2331 5 -1 roll div]cvx def
/sfnts [<






00>] def
/CharStrings 3 dict dup begin
/.notdef 0 def
/theta 1 def
/u20B8 2 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1910 -985 3218 2331}def
/UniqueID 4404112 def
currentdict currentfile eexec

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/SDWVOI+Helvetica-Oblique cguidfix
/F2.1/SDWVOI+Helvetica-Oblique renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
-34.333332 212.5 m
623.66669 212.5 l
623.66669 -16.5 l
-34.333332 -16.5 l
-34.333332 212.5 l
h
W
0 0 576 191 rc
-34.333332 212.5 m
623.66669 212.5 l
623.66669 -16.5 l
-34.333332 -16.5 l
h
f
Q
q
0 0 576 191 rc
-34.333332 212.5 m
623.66669 212.5 l
623.66669 -16.5 l
-34.333332 -16.5 l
h
f
3 w
1 j
0 sc
1 0 0 -1 -34.333332 212.5 cm
97.980949 188.14964 m
99.134682 187.10677 l
100.28841 185.62634 l
101.44215 184.14363 l
102.59588 182.66011 l
103.7496 181.17659 l
104.90334 179.69305 l
106.05707 178.20888 l
107.2108 176.72559 l
108.36452 175.2422 l
109.51826 173.75876 l
110.67199 172.27527 l
111.82572 170.79178 l
112.97945 169.30827 l
114.13318 167.82477 l
115.28691 166.34125 l
116.44064 164.85773 l
117.59438 163.37421 l
118.74811 161.89067 l
119.90183 160.40715 l
121.05556 158.92363 l
122.2093 157.44011 l
123.36303 155.95657 l
124.51675 154.47304 l
125.67049 152.98952 l
126.82422 151.50598 l
127.97795 150.02246 l
129.13168 148.53893 l
130.28542 147.0554 l
131.43915 145.57187 l
132.59286 144.08833 l
133.7466 142.60481 l
134.90033 141.12128 l
136.05406 139.63776 l
137.20779 138.15422 l
138.36153 136.6707 l
139.51526 135.18716 l
140.66899 133.70363 l
141.82272 132.22011 l
142.97644 130.73657 l
144.13017 129.25304 l
145.28391 127.76952 l
146.43764 126.28598 l
147.59137 124.80245 l
148.7451 123.31892 l
149.89883 121.8354 l
151.05257 120.35186 l
152.2063 118.86832 l
153.36002 117.3848 l
154.51375 115.90128 l
155.66748 114.41775 l
156.82121 112.93421 l
157.97495 111.45068 l
159.12868 109.96716 l
160.28241 108.48363 l
161.43614 107.0001 l
162.58987 105.51656 l
163.74359 104.03304 l
164.89732 102.54951 l
166.05106 101.06598 l
167.20479 99.582443 l
168.35852 98.098915 l
169.51225 96.615387 l
170.66599 95.131859 l
171.81972 93.648331 l
172.97345 92.164795 l
174.12717 90.681267 l
175.2809 89.197739 l
176.43463 87.714211 l
177.58836 86.230682 l
178.7421 84.747154 l
179.89583 83.263626 l
181.04956 81.78009 l
182.20329 80.296562 l
183.35703 78.813034 l
184.51074 77.329506 l
185.66447 75.845978 l
186.81821 74.36245 l
187.97194 72.878922 l
189.12567 71.395393 l
190.2794 69.911865 l
191.43314 68.428345 l
192.58687 66.944817 l
193.7406 65.461296 l
194.89433 63.977772 l
196.04805 62.494255 l
197.20178 61.010738 l
198.35551 59.527229 l
199.50925 58.043724 l
200.66298 56.56023 l
201.81671 55.076756 l
202.97044 53.593307 l
204.12418 52.109905 l
205.27789 50.626598 l
206.43163 49.143467 l
207.58536 47.660751 l
208.73909 46.179165 l
209.89282 44.701576 l
211.04655 43.24641 l
212.20029 42.105766 l
S
2 w
2 j
1 M
[
8
8
] 0 d
97.980949 110.5 m
99.134682 110.5 l
100.28841 110.5 l
101.44215 110.5 l
102.59588 110.5 l
103.7496 110.5 l
104.90334 110.5 l
106.05707 110.5 l
107.2108 110.5 l
108.36452 110.5 l
109.51826 110.5 l
110.67199 110.5 l
111.82572 110.5 l
112.97945 110.5 l
114.13318 110.5 l
115.28691 110.5 l
116.44064 110.5 l
117.59438 110.5 l
118.74811 110.5 l
119.90183 110.5 l
121.05556 110.5 l
122.2093 110.5 l
123.36303 110.5 l
124.51675 110.5 l
125.67049 110.5 l
126.82422 110.5 l
127.97795 110.5 l
129.13168 110.5 l
130.28542 110.5 l
131.43915 110.5 l
132.59286 110.5 l
133.7466 110.5 l
134.90033 110.5 l
136.05406 110.5 l
137.20779 110.5 l
138.36153 110.5 l
139.51526 110.5 l
140.66899 110.5 l
141.82272 110.5 l
142.97644 110.5 l
144.13017 110.5 l
145.28391 110.5 l
146.43764 110.5 l
147.59137 110.5 l
148.7451 110.5 l
149.89883 110.5 l
151.05257 110.5 l
152.2063 110.5 l
153.36002 110.5 l
154.51375 110.5 l
155.66748 110.5 l
156.82121 110.5 l
157.97495 110.5 l
159.12868 110.5 l
160.28241 110.5 l
161.43614 110.5 l
162.58987 110.5 l
163.74359 110.5 l
164.89732 110.5 l
166.05106 110.5 l
167.20479 110.5 l
168.35852 110.5 l
169.51225 110.5 l
170.66599 110.5 l
171.81972 110.5 l
172.97345 110.5 l
174.12717 110.5 l
175.2809 110.5 l
176.43463 110.5 l
177.58836 110.5 l
178.7421 110.5 l
179.89583 110.5 l
181.04956 110.5 l
182.20329 110.5 l
183.35703 110.5 l
184.51074 110.5 l
185.66447 110.5 l
186.81821 110.5 l
187.97194 110.5 l
189.12567 110.5 l
190.2794 110.5 l
191.43314 110.5 l
192.58687 110.5 l
193.7406 110.5 l
194.89433 110.5 l
196.04805 110.5 l
197.20178 110.5 l
198.35551 110.5 l
199.50925 110.5 l
200.66298 110.5 l
201.81671 110.5 l
202.97044 110.5 l
204.12418 110.5 l
205.27789 110.5 l
206.43163 110.5 l
207.58536 110.5 l
208.73909 110.5 l
209.89282 110.5 l
211.04655 110.5 l
212.20029 110.5 l
S
/Cs2 SC
0 0 1 sc
CM
70.980949 24.350357 m
70.980949 28.400446 67.697701 31.683691 63.647617 31.683691 c
59.597527 31.683691 56.314281 28.400446 56.314281 24.350357 c
56.314281 20.300268 59.597527 17.017023 63.647617 17.017023 c
67.697701 17.017023 70.980949 20.300268 70.980949 24.350357 c
h
f
63.647617 31.433691 m
67.559631 31.433691 70.730949 28.262373 70.730949 24.350357 c
70.730949 24.350357 l
70.730949 20.438341 67.559631 17.267023 63.647617 17.267023 c
59.7356 17.267023 56.564281 20.438341 56.564281 24.350357 c
56.564281 28.262373 59.7356 31.433691 63.647617 31.433691 c
h
63.647617 31.933691 m
59.459457 31.933691 56.064281 28.538517 56.064281 24.350357 c
56.064281 20.162197 59.459457 16.767023 63.647617 16.767023 c
67.835777 16.767023 71.230949 20.162197 71.230949 24.350357 c
71.230949 24.350357 l
71.230949 28.538517 67.835777 31.933691 63.647617 31.933691 c
h
f
185.20029 170.39424 m
185.20029 174.44432 181.91704 177.72757 177.86696 177.72757 c
173.81686 177.72757 170.53362 174.44432 170.53362 170.39424 c
170.53362 166.34415 173.81686 163.0609 177.86696 163.0609 c
181.91704 163.0609 185.20029 166.34415 185.20029 170.39424 c
h
f
177.86696 177.47757 m
181.77898 177.47757 184.95029 174.30624 184.95029 170.39424 c
184.95029 170.39424 l
184.95029 166.48222 181.77898 163.3109 177.86696 163.3109 c
173.95494 163.3109 170.78362 166.48222 170.78362 170.39424 c
170.78362 174.30624 173.95494 177.47757 177.86696 177.47757 c
h
177.86696 177.97757 m
173.67879 177.97757 170.28362 174.5824 170.28362 170.39424 c
170.28362 166.20607 173.67879 162.8109 177.86696 162.8109 c
182.05511 162.8109 185.45029 166.20607 185.45029 170.39424 c
185.45029 170.39424 l
185.45029 174.5824 182.05511 177.97757 177.86696 177.97757 c
h
f
3 w
1 j
10 M
[] 0 d
/Cs1 SC
0 sc
1 0 0 -1 -34.333332 212.5 cm
212.20029 42.105766 m
213.35402 43.207588 l
214.50775 44.680229 l
215.66148 46.147308 l
216.8152 47.609055 l
217.96893 49.066864 l
219.12267 50.515293 l
220.2764 51.958149 l
221.43013 53.395107 l
222.58386 54.82605 l
223.73759 56.250931 l
224.89133 57.669708 l
226.04506 59.082359 l
227.19879 60.488873 l
228.35251 61.889214 l
229.50624 63.283363 l
230.65997 64.67128 l
231.81371 66.052933 l
232.96744 67.428284 l
234.12117 68.797295 l
235.27489 70.159912 l
236.42862 71.516075 l
237.58235 72.865738 l
238.73608 74.208824 l
239.88982 75.545288 l
241.04355 76.875031 l
242.19728 78.19799 l
243.35101 79.514084 l
244.50475 80.823212 l
245.65848 82.125282 l
246.81221 83.420197 l
247.96594 84.707848 l
249.11967 85.988121 l
250.27341 87.260895 l
251.42712 88.526047 l
252.58086 89.78344 l
253.73459 91.032936 l
254.88832 92.274384 l
256.04205 93.507622 l
257.19577 94.732498 l
258.34952 95.94883 l
259.50323 97.156448 l
260.65698 98.355148 l
261.8107 99.544739 l
262.96445 100.72501 l
264.11816 101.89574 l
265.27188 103.05672 l
266.42563 104.20768 l
267.57935 105.34838 l
268.73309 106.47856 l
269.88681 107.59795 l
271.04056 108.70626 l
272.19427 109.80318 l
273.34799 110.88842 l
274.50174 111.96163 l
275.65546 113.02248 l
276.8092 114.07063 l
277.96292 115.10567 l
279.11667 116.12726 l
280.27039 117.13497 l
281.42413 118.1284 l
282.57785 119.1071 l
283.7316 120.07064 l
284.88531 121.01855 l
286.03906 121.95034 l
287.19278 122.86552 l
288.3465 123.76357 l
289.50024 124.64397 l
290.65396 125.50615 l
291.80771 126.34956 l
292.96143 127.17364 l
294.11517 127.97777 l
295.26889 128.76135 l
296.42261 129.52377 l
297.57635 130.2644 l
298.73007 130.9826 l
299.88382 131.67773 l
301.03754 132.34914 l
302.19128 132.99617 l
303.345 133.61818 l
304.49875 134.21451 l
305.65247 134.78452 l
306.80621 135.32756 l
307.95993 135.84305 l
309.11368 136.33034 l
310.2674 136.78886 l
311.42111 137.21808 l
312.57486 137.61743 l
313.72858 137.98643 l
314.88232 138.32465 l
316.03604 138.63165 l
317.18979 138.90706 l
318.34351 139.15057 l
319.49722 139.36192 l
320.65097 139.54089 l
321.80469 139.68736 l
322.95844 139.80122 l
324.11215 139.88242 l
325.26587 139.93111 l
326.41962 139.9473 l
S
2 w
2 j
1 M
[
8
8
] 0 d
212.20029 110.5 m
213.35402 110.5 l
214.50775 110.5 l
215.66148 110.5 l
216.8152 110.5 l
217.96893 110.5 l
219.12267 110.5 l
220.2764 110.5 l
221.43013 110.5 l
222.58386 110.5 l
223.73759 110.5 l
224.89133 110.5 l
226.04506 110.5 l
227.19879 110.5 l
228.35251 110.5 l
229.50624 110.5 l
230.65997 110.5 l
231.81371 110.5 l
232.96744 110.5 l
234.12117 110.5 l
235.27489 110.5 l
236.42862 110.5 l
237.58235 110.5 l
238.73608 110.5 l
239.88982 110.5 l
241.04355 110.5 l
242.19728 110.5 l
243.35101 110.5 l
244.50475 110.5 l
245.65848 110.5 l
246.81221 110.5 l
247.96594 110.5 l
249.11967 110.5 l
250.27341 110.5 l
251.42712 110.5 l
252.58086 110.5 l
253.73459 110.5 l
254.88832 110.5 l
256.04205 110.5 l
257.19577 110.5 l
258.34952 110.5 l
259.50323 110.5 l
260.65698 110.5 l
261.8107 110.5 l
262.96445 110.5 l
264.11816 110.5 l
265.27188 110.5 l
266.42563 110.5 l
267.57935 110.5 l
268.73309 110.5 l
269.88681 110.5 l
271.04056 110.5 l
272.19427 110.5 l
273.34799 110.5 l
274.50174 110.5 l
275.65546 110.5 l
276.8092 110.5 l
277.96292 110.5 l
279.11667 110.5 l
280.27039 110.5 l
281.42413 110.5 l
282.57785 110.5 l
283.7316 110.5 l
284.88531 110.5 l
286.03906 110.5 l
287.19278 110.5 l
288.3465 110.5 l
289.50024 110.5 l
290.65396 110.5 l
291.80771 110.5 l
292.96143 110.5 l
294.11517 110.5 l
295.26889 110.5 l
296.42261 110.5 l
297.57635 110.5 l
298.73007 110.5 l
299.88382 110.5 l
301.03754 110.5 l
302.19128 110.5 l
303.345 110.5 l
304.49875 110.5 l
305.65247 110.5 l
306.80621 110.5 l
307.95993 110.5 l
309.11368 110.5 l
310.2674 110.5 l
311.42111 110.5 l
312.57486 110.5 l
313.72858 110.5 l
314.88232 110.5 l
316.03604 110.5 l
317.18979 110.5 l
318.34351 110.5 l
319.49722 110.5 l
320.65097 110.5 l
321.80469 110.5 l
322.95844 110.5 l
324.11215 110.5 l
325.26587 110.5 l
326.41962 110.5 l
S
/Cs2 SC
0 0 1 sc
CM
185.20029 170.39424 m
185.20029 174.44432 181.91704 177.72757 177.86696 177.72757 c
173.81686 177.72757 170.53362 174.44432 170.53362 170.39424 c
170.53362 166.34415 173.81686 163.0609 177.86696 163.0609 c
181.91704 163.0609 185.20029 166.34415 185.20029 170.39424 c
h
f
177.86696 177.47757 m
181.77898 177.47757 184.95029 174.30624 184.95029 170.39424 c
184.95029 170.39424 l
184.95029 166.48222 181.77898 163.3109 177.86696 163.3109 c
173.95494 163.3109 170.78362 166.48222 170.78362 170.39424 c
170.78362 174.30624 173.95494 177.47757 177.86696 177.47757 c
h
177.86696 177.97757 m
173.67879 177.97757 170.28362 174.5824 170.28362 170.39424 c
170.28362 166.20607 173.67879 162.8109 177.86696 162.8109 c
182.05511 162.8109 185.45029 166.20607 185.45029 170.39424 c
185.45029 170.39424 l
185.45029 174.5824 182.05511 177.97757 177.86696 177.97757 c
h
f
299.41962 72.552704 m
299.41962 76.602791 296.13638 79.88604 292.08627 79.88604 c
288.03619 79.88604 284.75296 76.602791 284.75296 72.552704 c
284.75296 68.502617 288.03619 65.219368 292.08627 65.219368 c
296.13638 65.219368 299.41962 68.502617 299.41962 72.552704 c
h
f
292.08627 79.63604 m
295.99829 79.63604 299.16962 76.464722 299.16962 72.552704 c
299.16962 72.552704 l
299.16962 68.640686 295.99829 65.469368 292.08627 65.469368 c
288.17426 65.469368 285.00296 68.640686 285.00296 72.552704 c
285.00296 76.464722 288.17426 79.63604 292.08627 79.63604 c
h
292.08627 80.13604 m
287.89813 80.13604 284.50296 76.74086 284.50296 72.552704 c
284.50296 68.364548 287.89813 64.969368 292.08627 64.969368 c
296.27444 64.969368 299.66962 68.364548 299.66962 72.552704 c
299.66962 72.552704 l
299.66962 76.74086 296.27444 80.13604 292.08627 80.13604 c
h
f
3 w
1 j
10 M
[] 0 d
/Cs1 SC
0 sc
1 0 0 -1 -34.333332 212.5 cm
326.41962 139.9473 m
327.57333 139.93118 l
328.72708 139.883 l
329.8808 139.80302 l
331.03455 139.69171 l
332.18826 139.54938 l
333.34198 139.37654 l
334.49573 139.17371 l
335.64944 138.94147 l
336.80319 138.68044 l
337.95691 138.39125 l
339.11066 138.07463 l
340.26437 137.73129 l
341.41812 137.36198 l
342.57184 136.96748 l
343.72559 136.54858 l
344.8793 136.10608 l
346.03305 135.64081 l
347.18677 135.15359 l
348.34052 134.64525 l
349.49423 134.11662 l
350.64795 133.56853 l
351.8017 133.00182 l
352.95541 132.41728 l
354.10916 131.81575 l
355.26288 131.19803 l
356.41663 130.56491 l
357.57034 129.91716 l
358.72409 129.25557 l
359.87781 128.58089 l
361.03156 127.89385 l
362.18527 127.1952 l
363.33899 126.48564 l
364.49274 125.76588 l
365.64645 125.03662 l
366.8002 124.29852 l
367.95392 123.55227 l
369.10767 122.7985 l
370.26138 122.03786 l
371.4151 121.27099 l
372.56885 120.4985 l
373.72256 119.72102 l
374.87631 118.93913 l
376.03003 118.15346 l
377.18375 117.36457 l
378.33749 116.57307 l
379.49121 115.77953 l
380.64496 114.98452 l
381.79868 114.18863 l
382.95242 113.39243 l
384.10614 112.59647 l
385.25989 111.80135 l
386.4136 111.00764 l
387.56732 110.21589 l
388.72107 109.4267 l
389.87479 108.64063 l
391.02853 107.85828 l
392.18225 107.08024 l
393.336 106.30709 l
394.48972 105.53945 l
395.64346 104.77792 l
396.79718 104.02312 l
397.95093 103.27567 l
399.10464 102.53621 l
400.25839 101.80538 l
401.41211 101.08384 l
402.56586 100.37225 l
403.71957 99.67128 l
404.87329 98.981613 l
406.02704 98.303955 l
407.18076 97.639 l
408.3345 96.987457 l
409.48822 96.350052 l
410.64197 95.727509 l
411.79568 95.12056 l
412.94943 94.529945 l
414.10315 93.956406 l
415.2569 93.400688 l
416.41061 92.863518 l
417.56433 92.345642 l
418.71808 91.847786 l
419.8718 91.370682 l
421.02554 90.915024 l
422.17926 90.481506 l
423.33298 90.070808 l
424.48672 89.683571 l
425.64044 89.320412 l
426.79419 88.981918 l
427.94791 88.668648 l
429.10165 88.381096 l
430.25537 88.119743 l
431.40909 87.884995 l
432.56284 87.677216 l
433.71655 87.496712 l
434.8703 87.343727 l
436.02402 87.21846 l
437.17776 87.121025 l
438.33148 87.051521 l
439.48523 87.009827 l
440.63895 86.995956 l
S
2 w
2 j
1 M
[
8
8
] 0 d
326.41962 110.5 m
327.57333 110.5 l
328.72708 110.5 l
329.8808 110.5 l
331.03455 110.5 l
332.18826 110.5 l
333.34198 110.5 l
334.49573 110.5 l
335.64944 110.5 l
336.80319 110.5 l
337.95691 110.5 l
339.11066 110.5 l
340.26437 110.5 l
341.41812 110.5 l
342.57184 110.5 l
343.72559 110.5 l
344.8793 110.5 l
346.03305 110.5 l
347.18677 110.5 l
348.34052 110.5 l
349.49423 110.5 l
350.64795 110.5 l
351.8017 110.5 l
352.95541 110.5 l
354.10916 110.5 l
355.26288 110.5 l
356.41663 110.5 l
357.57034 110.5 l
358.72409 110.5 l
359.87781 110.5 l
361.03156 110.5 l
362.18527 110.5 l
363.33899 110.5 l
364.49274 110.5 l
365.64645 110.5 l
366.8002 110.5 l
367.95392 110.5 l
369.10767 110.5 l
370.26138 110.5 l
371.4151 110.5 l
372.56885 110.5 l
373.72256 110.5 l
374.87631 110.5 l
376.03003 110.5 l
377.18375 110.5 l
378.33749 110.5 l
379.49121 110.5 l
380.64496 110.5 l
381.79868 110.5 l
382.95242 110.5 l
384.10614 110.5 l
385.25989 110.5 l
386.4136 110.5 l
387.56732 110.5 l
388.72107 110.5 l
389.87479 110.5 l
391.02853 110.5 l
392.18225 110.5 l
393.336 110.5 l
394.48972 110.5 l
395.64346 110.5 l
396.79718 110.5 l
397.95093 110.5 l
399.10464 110.5 l
400.25839 110.5 l
401.41211 110.5 l
402.56586 110.5 l
403.71957 110.5 l
404.87329 110.5 l
406.02704 110.5 l
407.18076 110.5 l
408.3345 110.5 l
409.48822 110.5 l
410.64197 110.5 l
411.79568 110.5 l
412.94943 110.5 l
414.10315 110.5 l
415.2569 110.5 l
416.41061 110.5 l
417.56433 110.5 l
418.71808 110.5 l
419.8718 110.5 l
421.02554 110.5 l
422.17926 110.5 l
423.33298 110.5 l
424.48672 110.5 l
425.64044 110.5 l
426.79419 110.5 l
427.94791 110.5 l
429.10165 110.5 l
430.25537 110.5 l
431.40909 110.5 l
432.56284 110.5 l
433.71655 110.5 l
434.8703 110.5 l
436.02402 110.5 l
437.17776 110.5 l
438.33148 110.5 l
439.48523 110.5 l
440.63895 110.5 l
S
/Cs2 SC
0 0 1 sc
CM
299.41962 72.552704 m
299.41962 76.602791 296.13638 79.88604 292.08627 79.88604 c
288.03619 79.88604 284.75296 76.602791 284.75296 72.552704 c
284.75296 68.502617 288.03619 65.219368 292.08627 65.219368 c
296.13638 65.219368 299.41962 68.502617 299.41962 72.552704 c
h
f
292.08627 79.63604 m
295.99829 79.63604 299.16962 76.464722 299.16962 72.552704 c
299.16962 72.552704 l
299.16962 68.640686 295.99829 65.469368 292.08627 65.469368 c
288.17426 65.469368 285.00296 68.640686 285.00296 72.552704 c
285.00296 76.464722 288.17426 79.63604 292.08627 79.63604 c
h
292.08627 80.13604 m
287.89813 80.13604 284.50296 76.74086 284.50296 72.552704 c
284.50296 68.364548 287.89813 64.969368 292.08627 64.969368 c
296.27444 64.969368 299.66962 68.364548 299.66962 72.552704 c
299.66962 72.552704 l
299.66962 76.74086 296.27444 80.13604 292.08627 80.13604 c
h
f
413.63895 125.50404 m
413.63895 129.55414 410.35571 132.83737 406.3056 132.83737 c
402.25552 132.83737 398.97229 129.55414 398.97229 125.50404 c
398.97229 121.45396 402.25552 118.17071 406.3056 118.17071 c
410.35571 118.17071 413.63895 121.45396 413.63895 125.50404 c
h
f
406.3056 132.58737 m
410.21762 132.58737 413.38895 129.41606 413.38895 125.50404 c
413.38895 125.50404 l
413.38895 121.59203 410.21762 118.42071 406.3056 118.42071 c
402.39359 118.42071 399.22229 121.59203 399.22229 125.50404 c
399.22229 129.41606 402.39359 132.58737 406.3056 132.58737 c
h
406.3056 133.08737 m
402.11746 133.08737 398.72229 129.6922 398.72229 125.50404 c
398.72229 121.31589 402.11746 117.92071 406.3056 117.92071 c
410.49377 117.92071 413.88895 121.31589 413.88895 125.50404 c
413.88895 125.50404 l
413.88895 129.6922 410.49377 133.08737 406.3056 133.08737 c
h
f
3 w
1 j
10 M
[] 0 d
/Cs1 SC
0 sc
1 0 0 -1 -34.333332 212.5 cm
440.63895 86.995956 m
441.79266 87.009758 l
442.94641 87.051025 l
444.10013 87.119492 l
445.25388 87.214737 l
446.40759 87.336472 l
447.56134 87.484215 l
448.71506 87.657455 l
449.86877 87.855644 l
451.02252 88.078178 l
452.17627 88.324425 l
453.33002 88.593704 l
454.4837 88.8853 l
455.63745 89.198494 l
456.7912 89.532516 l
457.94489 89.886589 l
459.09863 90.259918 l
460.25238 90.651703 l
461.4061 91.061119 l
462.55981 91.487358 l
463.71356 91.929604 l
464.86731 92.387032 l
466.02103 92.858826 l
467.17474 93.344185 l
468.32849 93.842308 l
469.48221 94.352402 l
470.63596 94.87368 l
471.78967 95.405388 l
472.94342 95.946762 l
474.09714 96.49707 l
475.25089 97.055573 l
476.4046 97.621567 l
477.55832 98.194351 l
478.71207 98.773247 l
479.86578 99.357582 l
481.01953 99.946709 l
482.17325 100.53999 l
483.327 101.1368 l
484.48071 101.73653 l
485.63443 102.3386 l
486.78818 102.9424 l
487.94193 103.54738 l
489.09561 104.15298 l
490.24936 104.75865 l
491.40311 105.36386 l
492.55685 105.96809 l
493.71054 106.57084 l
494.86429 107.17159 l
496.01804 107.76985 l
497.17172 108.36514 l
498.32547 108.957 l
499.47922 109.54494 l
500.63297 110.12852 l
501.78665 110.7073 l
502.9404 111.28081 l
504.09415 111.84863 l
505.24789 112.41034 l
506.40158 112.9655 l
507.55533 113.51371 l
508.70908 114.05455 l
509.86279 114.58763 l
511.01651 115.11255 l
512.17023 115.62892 l
513.32397 116.13635 l
514.47772 116.63448 l
515.63141 117.12292 l
516.78516 117.60133 l
517.9389 118.06932 l
519.09259 118.52657 l
520.24634 118.97273 l
521.40009 119.40749 l
522.55383 119.83044 l
523.70752 120.24133 l
524.86127 120.63985 l
526.01501 121.02567 l
527.16876 121.39853 l
528.32245 121.75819 l
529.4762 122.10428 l
530.62994 122.43658 l
531.78363 122.75487 l
532.93738 123.05888 l
534.09113 123.3484 l
535.24487 123.62323 l
536.39856 123.88316 l
537.55231 124.12801 l
538.70605 124.35763 l
539.8598 124.57185 l
541.01349 124.77049 l
542.16724 124.95354 l
543.32098 125.12083 l
544.47473 125.27228 l
545.62842 125.40781 l
546.78217 125.5274 l
547.93591 125.63097 l
549.0896 125.71854 l
550.24335 125.7901 l
551.39709 125.84566 l
552.55084 125.88528 l
553.70453 125.90899 l
554.85828 125.91687 l
S
2 w
2 j
1 M
[
8
8
] 0 d
440.63895 110.5 m
441.79266 110.5 l
442.94641 110.5 l
444.10013 110.5 l
445.25388 110.5 l
446.40759 110.5 l
447.56134 110.5 l
448.71506 110.5 l
449.86877 110.5 l
451.02252 110.5 l
452.17627 110.5 l
453.33002 110.5 l
454.4837 110.5 l
455.63745 110.5 l
456.7912 110.5 l
457.94489 110.5 l
459.09863 110.5 l
460.25238 110.5 l
461.4061 110.5 l
462.55981 110.5 l
463.71356 110.5 l
464.86731 110.5 l
466.02103 110.5 l
467.17474 110.5 l
468.32849 110.5 l
469.48221 110.5 l
470.63596 110.5 l
471.78967 110.5 l
472.94342 110.5 l
474.09714 110.5 l
475.25089 110.5 l
476.4046 110.5 l
477.55832 110.5 l
478.71207 110.5 l
479.86578 110.5 l
481.01953 110.5 l
482.17325 110.5 l
483.327 110.5 l
484.48071 110.5 l
485.63443 110.5 l
486.78818 110.5 l
487.94193 110.5 l
489.09561 110.5 l
490.24936 110.5 l
491.40311 110.5 l
492.55685 110.5 l
493.71054 110.5 l
494.86429 110.5 l
496.01804 110.5 l
497.17172 110.5 l
498.32547 110.5 l
499.47922 110.5 l
500.63297 110.5 l
501.78665 110.5 l
502.9404 110.5 l
504.09415 110.5 l
505.24789 110.5 l
506.40158 110.5 l
507.55533 110.5 l
508.70908 110.5 l
509.86279 110.5 l
511.01651 110.5 l
512.17023 110.5 l
513.32397 110.5 l
514.47772 110.5 l
515.63141 110.5 l
516.78516 110.5 l
517.9389 110.5 l
519.09259 110.5 l
520.24634 110.5 l
521.40009 110.5 l
522.55383 110.5 l
523.70752 110.5 l
524.86127 110.5 l
526.01501 110.5 l
527.16876 110.5 l
528.32245 110.5 l
529.4762 110.5 l
530.62994 110.5 l
531.78363 110.5 l
532.93738 110.5 l
534.09113 110.5 l
535.24487 110.5 l
536.39856 110.5 l
537.55231 110.5 l
538.70605 110.5 l
539.8598 110.5 l
541.01349 110.5 l
542.16724 110.5 l
543.32098 110.5 l
544.47473 110.5 l
545.62842 110.5 l
546.78217 110.5 l
547.93591 110.5 l
549.0896 110.5 l
550.24335 110.5 l
551.39709 110.5 l
552.55084 110.5 l
553.70453 110.5 l
554.85828 110.5 l
S
/Cs2 SC
0 0 1 sc
CM
413.63895 125.50404 m
413.63895 129.55414 410.35571 132.83737 406.3056 132.83737 c
402.25552 132.83737 398.97229 129.55414 398.97229 125.50404 c
398.97229 121.45396 402.25552 118.17071 406.3056 118.17071 c
410.35571 118.17071 413.63895 121.45396 413.63895 125.50404 c
h
f
406.3056 132.58737 m
410.21762 132.58737 413.38895 129.41606 413.38895 125.50404 c
413.38895 125.50404 l
413.38895 121.59203 410.21762 118.42071 406.3056 118.42071 c
402.39359 118.42071 399.22229 121.59203 399.22229 125.50404 c
399.22229 129.41606 402.39359 132.58737 406.3056 132.58737 c
h
406.3056 133.08737 m
402.11746 133.08737 398.72229 129.6922 398.72229 125.50404 c
398.72229 121.31589 402.11746 117.92071 406.3056 117.92071 c
410.49377 117.92071 413.88895 121.31589 413.88895 125.50404 c
413.88895 125.50404 l
413.88895 129.6922 410.49377 133.08737 406.3056 133.08737 c
h
f
527.85828 86.58313 m
527.85828 90.633217 524.57501 93.916466 520.52496 93.916466 c
516.47485 93.916466 513.19159 90.633217 513.19159 86.58313 c
513.19159 82.533043 516.47485 79.249794 520.52496 79.249794 c
524.57501 79.249794 527.85828 82.533043 527.85828 86.58313 c
h
f
520.52496 93.666466 m
524.43695 93.666466 527.60828 90.495148 527.60828 86.58313 c
527.60828 86.58313 l
527.60828 82.671112 524.43695 79.499794 520.52496 79.499794 c
516.61292 79.499794 513.44159 82.671112 513.44159 86.58313 c
513.44159 90.495148 516.61292 93.666466 520.52496 93.666466 c
h
520.52496 94.166466 m
516.33679 94.166466 512.94159 90.771286 512.94159 86.58313 c
512.94159 82.394974 516.33679 78.999794 520.52496 78.999794 c
524.71307 78.999794 528.10828 82.394974 528.10828 86.58313 c
528.10828 86.58313 l
528.10828 90.771286 524.71307 94.166466 520.52496 94.166466 c
h
f
/Cs3 SC
0 0 0 sc
1 0 0 1 40.666668 96.504555 cm
/F1.1[ 24 0 0 24 0 0]sf
0 0 m
(!)s
1 0 0 1 93.333336 47 cm
/F2.1[ 20 0 0 20 0 0]sf
0 0 m
(!)s
/F1.1[ 20 0 0 20 0 0]sf
12.236328 0 m
("#)[ 7.783203 0.000000 ] xS
/F2.1[ 20 0 0 20 0 0]sf
26.679688 0 m
(!)s
/F1.1[ 20 0 0 20 0 0]sf
38.916016 0 m
($%!&)[ 5.556641 5.556641 11.123047 0.000000 ] xS
1 0 0 1 216.5 129.66667 cm
/F2.1[ 20 0 0 20 0 0]sf
0 0 m
(!)s
/F1.1[ 20 0 0 20 0 0]sf
12.236328 0 m
("#)[ 7.783203 0.000000 ] xS
/F2.1[ 20 0 0 20 0 0]sf
26.679688 0 m
(!)s
/F1.1[ 20 0 0 20 0 0]sf
38.916016 0 m
($%'&)[ 5.556641 5.556641 11.123047 0.000000 ] xS
1 0 0 1 333.83334 69 cm
/F2.1[ 20 0 0 20 0 0]sf
0 0 m
(!)s
/F1.1[ 20 0 0 20 0 0]sf
12.236328 0 m
("#)[ 7.783203 0.000000 ] xS
/F2.1[ 20 0 0 20 0 0]sf
26.679688 0 m
(!)s
/F1.1[ 20 0 0 20 0 0]sf
38.916016 0 m
($%\(&)[ 5.556641 5.556641 11.123047 0.000000 ] xS
1 0 0 1 453.66666 119 cm
/F2.1[ 20 0 0 20 0 0]sf
0 0 m
(!)s
/F1.1[ 20 0 0 20 0 0]sf
12.236328 0 m
("#)[ 7.783203 0.000000 ] xS
/F2.1[ 20 0 0 20 0 0]sf
26.679688 0 m
(!)s
/F1.1[ 20 0 0 20 0 0]sf
38.916016 0 m
($%\)&)[ 5.556641 5.556641 11.123047 0.000000 ] xS
ep
end
%%Trailer
%%EOF
